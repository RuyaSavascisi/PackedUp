package com.supermartijn642.packedup.generators;

import com.supermartijn642.core.data.condition.NotResourceCondition;
import com.supermartijn642.core.generator.RecipeGenerator;
import com.supermartijn642.core.generator.ResourceCache;
import com.supermartijn642.packedup.BackpackRecipeCondition;
import com.supermartijn642.packedup.BackpackType;
import com.supermartijn642.packedup.BackpackUpgradeRecipe;
import com.supermartijn642.packedup.PackedUp;

/**
 * Created 14/11/2022 by SuperMartijn642
 */
public class PackedUpRecipeGenerator extends RecipeGenerator {

    public PackedUpRecipeGenerator(ResourceCache cache){
        super("packedup", cache);
    }

    @Override
    public void generate(){
        // Basic
        this.shaped("basic_from_chest", PackedUp.basicbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "stickWood")
            .input('B', "string")
            .input('C', "leather")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new BackpackRecipeCondition(BackpackType.BASIC));

        // Iron
        this.shaped("iron_from_chest", PackedUp.ironbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "ingotIron")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new BackpackRecipeCondition(BackpackType.IRON));
        this.shaped("iron_from_basic", PackedUp.ironbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotIron")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new BackpackRecipeCondition(BackpackType.IRON));

        // Copper
        this.shaped("copper_from_chest", PackedUp.copperbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "ingotCopper")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new BackpackRecipeCondition(BackpackType.COPPER));
        this.shaped("copper_from_basic", PackedUp.copperbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotCopper")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new BackpackRecipeCondition(BackpackType.COPPER));

        // Silver
        this.shaped("silver_from_chest", PackedUp.silverbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "ingotSilver")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new BackpackRecipeCondition(BackpackType.SILVER));
        this.shaped("silver_from_basic", PackedUp.silverbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotSilver")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new BackpackRecipeCondition(BackpackType.SILVER));
        this.shaped("silver_from_iron", PackedUp.silverbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotSilver")
            .input('B', "ingotIron")
            .input('C', PackedUp.ironbackpack)
            .unlockedBy(PackedUp.ironbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.IRON))
            .condition(new BackpackRecipeCondition(BackpackType.SILVER));
        this.shaped("silver_from_copper", PackedUp.silverbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotSilver")
            .input('B', "ingotCopper")
            .input('C', PackedUp.copperbackpack)
            .unlockedBy(PackedUp.copperbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.COPPER))
            .condition(new BackpackRecipeCondition(BackpackType.SILVER));

        // Gold
        this.shaped("gold_from_chest", PackedUp.goldbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "ingotGold")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new BackpackRecipeCondition(BackpackType.GOLD));
        this.shaped("gold_from_basic", PackedUp.goldbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotGold")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new BackpackRecipeCondition(BackpackType.GOLD));
        this.shaped("gold_from_iron", PackedUp.goldbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotGold")
            .input('B', "ingotIron")
            .input('C', PackedUp.ironbackpack)
            .unlockedBy(PackedUp.ironbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.IRON))
            .condition(new BackpackRecipeCondition(BackpackType.GOLD));
        this.shaped("gold_from_copper", PackedUp.goldbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "ingotGold")
            .input('B', "ingotCopper")
            .input('C', PackedUp.copperbackpack)
            .unlockedBy(PackedUp.copperbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.COPPER))
            .condition(new BackpackRecipeCondition(BackpackType.GOLD));

        // Diamond
        this.shaped("diamond_from_chest", PackedUp.diamondbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CEC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "gemDiamond")
            .input('D', "chestWood")
            .input('E', "blockGlass")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));
        this.shaped("diamond_from_basic", PackedUp.diamondbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("DDD")
            .input('A', "gemDiamond")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .input('D', "blockGlass")
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));
        this.shaped("diamond_from_iron", PackedUp.diamondbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("DDD")
            .input('A', "gemDiamond")
            .input('B', "ingotIron")
            .input('C', PackedUp.ironbackpack)
            .input('D', "blockGlass")
            .unlockedBy(PackedUp.ironbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.IRON))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));
        this.shaped("diamond_from_copper", PackedUp.diamondbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("DDD")
            .input('A', "gemDiamond")
            .input('B', "ingotCopper")
            .input('C', PackedUp.copperbackpack)
            .input('D', "blockGlass")
            .unlockedBy(PackedUp.copperbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.COPPER))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));
        this.shaped("diamond_from_silver", PackedUp.diamondbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("DDD")
            .input('A', "gemDiamond")
            .input('B', "ingotSilver")
            .input('C', PackedUp.silverbackpack)
            .input('D', "blockGlass")
            .unlockedBy(PackedUp.silverbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.SILVER))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));
        this.shaped("diamond_from_gold", PackedUp.diamondbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("DDD")
            .input('A', "gemDiamond")
            .input('B', "ingotGold")
            .input('C', PackedUp.goldbackpack)
            .input('D', "blockGlass")
            .unlockedBy(PackedUp.goldbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.GOLD))
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND));

        // Obsidian
        this.shaped("obsidian_from_chest", PackedUp.obsidianbackpack)
            .pattern("ABA")
            .pattern("CDC")
            .pattern("CCC")
            .input('A', "leather")
            .input('B', "string")
            .input('C', "obsidian")
            .input('D', "chestWood")
            .unlockedByOreDict("chestWood")
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.BASIC)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_basic", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "leather")
            .input('C', PackedUp.basicbackpack)
            .unlockedBy(PackedUp.basicbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.BASIC))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.IRON)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.COPPER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_iron", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "ingotIron")
            .input('C', PackedUp.ironbackpack)
            .unlockedBy(PackedUp.ironbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.IRON))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_copper", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "ingotCopper")
            .input('C', PackedUp.copperbackpack)
            .unlockedBy(PackedUp.copperbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.COPPER))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.SILVER)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.GOLD)))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_silver", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "ingotSilver")
            .input('C', PackedUp.silverbackpack)
            .unlockedBy(PackedUp.silverbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.SILVER))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_gold", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "ingotGold")
            .input('C', PackedUp.goldbackpack)
            .unlockedBy(PackedUp.goldbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.GOLD))
            .condition(new NotResourceCondition(new BackpackRecipeCondition(BackpackType.DIAMOND)))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
        this.shaped("obsidian_from_diamond", PackedUp.obsidianbackpack)
            .customSerializer(BackpackUpgradeRecipe.SERIALIZER)
            .pattern("ABA")
            .pattern("ACA")
            .pattern("AAA")
            .input('A', "obsidian")
            .input('B', "gemDiamond")
            .input('C', PackedUp.diamondbackpack)
            .unlockedBy(PackedUp.diamondbackpack)
            .condition(new BackpackRecipeCondition(BackpackType.DIAMOND))
            .condition(new BackpackRecipeCondition(BackpackType.OBSIDIAN));
    }
}
